#!/bin/bash

# Variables
# ---------
LLM=${LLM:-qwen/qwen2.5-coder-14b}

# New variable for context limit in characters
CONTEXT_LIMIT=${CONTEXT_LIMIT:-8192} # Default to 8192 characters

# Default diff source
DIFF_SOURCE=${DIFF_SOURCE:-diff} # Can be 'diff' (staged) or 'last-commit'

SYSTEM="You're a Git commit message generator."
PROMPT=$(cat <<EOF
Generate a Git commit message from the diff below.

Use conventional commit format (feat, fix, refactor, chore, build, test, docs, style, perf).
The first line should be a short, one-line message.
Use imperative verbs (e.g. add, fix, refactor, update).
End the first line with a fitting emoji.

After the first line, provide a more detailed explanation of the changes. This can be multiple lines if necessary.

Only output the message. No extra text.

Return format:
<type>: <action> <subject> <emoji>

<Detailed explanation of changes, possibly multiline.>

Example:
feat: add search bar to header ✨

This commit introduces a new search bar component in the header section of the application. It allows users to quickly search for content across the site. The search functionality is integrated with the existing backend API.

Diff:
EOF)

GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
GIT_HOOK=$(
  cat <<EOF
#!/bin/bash

if [[ -z "\$2" ]]; then
  $(realpath "$0") --hook "\$1" || true
fi
EOF)

# Functions
# --------
show_help() {
  cat <<EOF
Usage: $0 [--install | --husky | --hook <commit-msg-file> | --source <diff|last-commit> | --help]

Options:
  --install               Install this script as a Git prepare-commit-msg hook
  --husky                 Install this script as a Husky hook
  --hook <file>           Internal use: invoked by Git with path to commit message file
  --source <diff|last-commit> Specify the source of the diff ('diff' for staged, 'last-commit' for last commit)
  --help, -h              Show this help message

Description:
  When invoked normally (no args), the script analyzes staged changes
  and generates a Git commit message using an LLM running locally.

Examples:
  $0                      # Generate a commit message and print it (from staged changes)
  $0 --source last-commit # Generate a commit message from the last commit
  $0 --install            # Install as Git hook
  $0 --husky              # Install as Husky hook
  $0 --hook .git/COMMIT_EDITMSG  # Called by Git automatically
EOF
  exit 0
}

install_hook() {
  echo "$GIT_HOOK" >$1
  chmod +x $1
  echo "✅ Git hook 'prepare-commit-msg' installed at $1"
  exit 0
}

# Handle flags
# ------------
while [ "$#" -gt 0 ]; do
  case "$1" in
  --help | -h)
    show_help
    ;;
  --install)
    install_hook "$GIT_DIR/hooks/prepare-commit-msg"
    ;;
  --husky)
    install_hook ".husky/prepare-commit-msg"
    ;;
  --hook)
    if [ -z "$2" ]; then
      echo "❌ --hook requires a commit message file path."
      exit 1
    fi
    COMMIT_MSG_FILE="$2"
    shift # consume argument
    ;;
  --source)
    if [ -z "$2" ]; then
      echo "❌ --source requires an argument: 'diff' or 'last-commit'."
      exit 1
    fi
    if [[ "$2" == "diff" || "$2" == "last-commit" ]]; then
      DIFF_SOURCE="$2"
    else
      echo "❌ Invalid argument for --source: $2. Must be 'diff' or 'last-commit'."
      exit 1
    fi
    shift # consume argument
    ;;
  *)
    echo "❌ Unknown option: $1"
    echo "Use --help for usage information"
    exit 1
    ;;
  esac
  shift # consume option
done

# Check dependencies
# ------------------
for dep in git curl jq; do
  if ! command -v "$dep" &>/dev/null; then
    echo "❌ $dep is not installed" >&2
    exit 0
  fi
done

# Check if we're in a Git repo
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo "❌ Not a Git repository." >&2
  exit 0
fi

# Get diff based on DIFF_SOURCE
if [ "$DIFF_SOURCE" == "diff" ]; then
  DIFF_OUTPUT=$(git diff --cached)
  if [ -z "$DIFF_OUTPUT" ]; then
    echo "❌ No staged changes found. Run 'git add' first." >&2
    exit 0
  fi
elif [ "$DIFF_SOURCE" == "last-commit" ]; then
  if ! git rev-parse HEAD >/dev/null 2>&1; then
    echo "❌ No commits found in the repository." >&2
    exit 0
  fi
  DIFF_OUTPUT=$(git diff HEAD~1..HEAD)
  if [ -z "$DIFF_OUTPUT" ]; then
    echo "ℹ️ No changes found in the last commit. Perhaps the commit was empty or you are on the first commit." >&2
    # It's possible to have no diff for the last commit (e.g., initial empty commit or a revert)
    # For commit message generation, an empty diff won't work well, so we should probably exit.
    exit 0
  fi
fi

DIFF_SIZE=${#DIFF_OUTPUT}

# Truncate diff if it exceeds CONTEXT_LIMIT
if [ "$DIFF_SIZE" -gt "$CONTEXT_LIMIT" ]; then
  echo "✂️ Diff truncated from $DIFF_SIZE to $CONTEXT_LIMIT characters due to CONTEXT_LIMIT." >&2
  DIFF_OUTPUT=$(echo "$DIFF_OUTPUT" | head -c "$CONTEXT_LIMIT")
fi

PROMPT="$PROMPT

$DIFF_OUTPUT"

# Make the curl request and capture the raw JSON response
RESPONSE_JSON=$(
  jq -nc --arg model "$LLM" --arg prompt "$PROMPT" --arg system "$SYSTEM" \
    '{
      model: $model,
      messages: [
        { role: "system", content: $system },
        { role: "user", content: $prompt }
      ],
      stream: false
    }' |
    curl -s http://localhost:1234/v1/chat/completions \
      -H "Content-Type: application/json" \
      -d @- \
      --silent --show-error --fail
)

# Check if curl command itself failed (e.g., connection refused, bad URL)
if [ $? -ne 0 ]; then
  echo "❌ curl command failed to connect to LLM API. Make sure your LLM server is running at http://localhost:1234." >&2
  exit 1
fi

# Check if the response is valid JSON and contains a top-level "error" key
if echo "$RESPONSE_JSON" | jq -e 'has("error")' >/dev/null 2>&1; then
  ERROR_MESSAGE=$(echo "$RESPONSE_JSON" | jq -r '.error.message // .error // "Unknown error"')
  echo "❌ LLM API responded with an error: $ERROR_MESSAGE" >&2
  exit 1
# Check if the response is malformed JSON
elif ! echo "$RESPONSE_JSON" | jq -e '.' >/dev/null 2>&1; then
  echo "❌ LLM API returned malformed JSON response: $RESPONSE_JSON" >&2
  exit 1
fi

# Extract the commit message content using jq
COMMIT_MESSAGE=$(echo "$RESPONSE_JSON" | jq -r '.choices[0].message.content')

# Fallback/validation: Ensure the extracted message is not empty or "null" literal
if [ -z "$COMMIT_MESSAGE" ] || [ "$COMMIT_MESSAGE" = "null" ]; then
  echo "❌ No commit message generated or the content field was empty/null. Please check the LLM's response structure." >&2
  exit 1
fi

# Clean up ``` markdown blocks if present
COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed '/^```bash\|^```text\|^```markdown\|^```/d')

# Output
if [ -n "$COMMIT_MSG_FILE" ]; then
  echo "$COMMIT_MESSAGE" >"$COMMIT_MSG_FILE"
else
  echo "$COMMIT_MESSAGE"
fi
